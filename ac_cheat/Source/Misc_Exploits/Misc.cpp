#include "Misc.h"
#include "../../Menu/src/Menu.h"

CPlayer* aimPlayer = nullptr;
static DWORD ret_addr = NULL;
static DWORD ret_addr2 = NULL;
const BYTE m_pOnlyHead[2] = { 0x75, 0x9 };
const BYTE m_pTeleKill[6] = { 0x8B, 0x46, 0x8, 0x8B, 0x48, 0x4 };
const BYTE m_pNoRecoil[10] = { 0x50, 0x8D, 0x4C, 0x24, 0x1C, 0x51, 0x8B, 0xCE, 0xFF, 0xD2 };
const BYTE m_pTrigger[5] = { 0xE8, 0x1E, 0x5A, 0x05, 0x00 };

void Misc::SetHeadshot()
{
	static DWORD addr = (DWORD)GetModuleHandle(NULL) + 0x61767;
	if (vars::m_bOnlyHeadShot)
	{
		DWORD oProc;
		VirtualProtect((BYTE*)addr, 2, PAGE_EXECUTE_READWRITE, &oProc);
		memset((BYTE*)addr, 0x90, 2);
		VirtualProtect((BYTE*)addr, 2, oProc, &oProc);
	}
	else
	{
		DWORD oProc;
		VirtualProtect((BYTE*)addr, 2, PAGE_EXECUTE_READWRITE, &oProc);
		memcpy((BYTE*)addr, m_pOnlyHead, 2);
		VirtualProtect((BYTE*)addr, 2, oProc, &oProc);
	}
}
void Misc::SetNoRecoil()
{
	static DWORD addr = (DWORD)GetModuleHandle(NULL) + 0x63786;
	if (vars::m_bNoRecoil)
	{
		DWORD oProc;
		VirtualProtect((BYTE*)addr, 10, PAGE_EXECUTE_READWRITE, &oProc);
		memset((BYTE*)addr, 0x90, 10);
		VirtualProtect((BYTE*)addr, 10, oProc, &oProc);
	}
	else
	{
		DWORD oProc;
		VirtualProtect((BYTE*)addr, 10, PAGE_EXECUTE_READWRITE, &oProc);
		memcpy((BYTE*)addr, m_pNoRecoil, 10);
		VirtualProtect((BYTE*)addr, 10, oProc, &oProc);
	}
}

__declspec(naked) void Func()
{
	__asm
	{
		mov eax, [esi + 8]
		cmp eax, GData::p_local
		je if_true
		mov ecx, [eax + 4]
		jmp ret_addr

		if_true :
		cmp aimPlayer, 0
		jne do_tele
		mov ecx, [eax + 4]
		jmp ret_addr

		do_tele:
		mov eax, aimPlayer
		mov ecx, [eax + 4]
		jmp ret_addr
	}
}

void Misc::SetTeleKill()
{
	static DWORD addr = (DWORD)GetModuleHandle(NULL) + 0x10A400;
	static DWORD FuncAddr = (DWORD)GetModuleHandle(NULL) + 0x6373D;
	ret_addr = (DWORD)GetModuleHandle(NULL) + 0x6373D + 0x6;
	Vector3& rayHit = *(Vector3*)(addr);

	aimPlayer = nullptr;
	for (int i = 0; i < GData::p_num; i++)
	{
		CPlayer* currPlayer = *(CPlayer**)(*(uintptr_t*)(GData::module_start + offsets::ent_list) + i * 0x4);
		if (!g_Utils.IsValid(currPlayer))
			continue;

		if (currPlayer->m_iTeamNum == GData::p_local->m_iTeamNum)
			continue;

		aimPlayer = currPlayer;
	}

	if (aimPlayer != nullptr && vars::m_bTeleKill)
		rayHit = aimPlayer->m_vecHeadPos;

	if (vars::m_bTeleKill)
	{
		DWORD oProc;
		VirtualProtect((BYTE*)FuncAddr, 6, PAGE_EXECUTE_READWRITE, &oProc);
		memset((BYTE*)FuncAddr, 0x90, 6);
		*(BYTE*)FuncAddr = 0xE9;
		*(DWORD*)(FuncAddr + 1) = (DWORD)&Func - ((DWORD)FuncAddr + 5);
		VirtualProtect((BYTE*)FuncAddr, 6, oProc, &oProc);
	}
	else
	{
		DWORD oProc;
		VirtualProtect((BYTE*)FuncAddr, 6, PAGE_EXECUTE_READWRITE, &oProc);
		memcpy((BYTE*)FuncAddr, m_pTeleKill, 6);
		VirtualProtect((BYTE*)FuncAddr, 6, oProc, &oProc);
	}
}

static DWORD call_addr;
DWORD edi_copy = 0x0;

__declspec(naked) void Func2()
{
	__asm
	{
		call call_addr
		pushad
		mov edi_copy, eax
	}

	INPUT in;

	if (edi_copy != NULL)
	{
		in.type = INPUT_MOUSE;
		in.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
		SendInput(1, &in, sizeof(INPUT));
	}
	else
	{
		in.type = INPUT_MOUSE;
		in.mi.dwFlags = MOUSEEVENTF_LEFTUP;
		SendInput(1, &in, sizeof(INPUT));
	}

	__asm
	{
		popad
		jmp ret_addr2
	}
}

void Misc::TriggerBot()
{
	static DWORD FuncAddr = (DWORD)GetModuleHandle(NULL) + 0xAD9D;
	ret_addr2 = (DWORD)GetModuleHandle(NULL) + 0xADA2;
	call_addr = (DWORD)GetModuleHandle(NULL) + 0x607C0;

	if (vars::m_bTrigger)
	{
		DWORD oProtect;
		VirtualProtect((BYTE*)FuncAddr, 5, PAGE_EXECUTE_READWRITE, &oProtect);
		memset((BYTE*)FuncAddr, 0x90, 5);
		*(BYTE*)(FuncAddr) = 0xE9;
		*(DWORD*)(FuncAddr + 1) = (DWORD)&Func2 - ((DWORD)FuncAddr + 5);
		VirtualProtect((BYTE*)FuncAddr, 5, oProtect, &oProtect);
	}
	else
	{
		DWORD oProc;
		VirtualProtect((BYTE*)FuncAddr, 5, PAGE_EXECUTE_READWRITE, &oProc);
		memcpy((BYTE*)FuncAddr, m_pTrigger, 5);
		VirtualProtect((BYTE*)FuncAddr, 5, oProc, &oProc);
	}
}

Misc g_Misc;